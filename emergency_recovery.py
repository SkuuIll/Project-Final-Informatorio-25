#!/usr/bin/env python3
"""
Script de recuperaci√≥n de emergencia para error 500.
"""

import os
import sys
import django
from datetime import datetime, timedelta

# Configurar Django
sys.path.append('.')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'blog.configuraciones.settings')
django.setup()

from posts.models import Post
from django.contrib.auth.models import User

def find_problematic_post():
    """Encontrar el post que puede estar causando el problema."""
    print("üîç Buscando post problem√°tico...\n")
    
    try:
        # Buscar posts recientes (√∫ltimas 2 horas)
        recent_time = datetime.now() - timedelta(hours=2)
        recent_posts = Post.objects.filter(created_at__gte=recent_time).order_by('-created_at')
        
        print(f"üìã Posts recientes (√∫ltimas 2 horas): {recent_posts.count()}")
        
        for post in recent_posts:
            print(f"\nüìÑ Post ID: {post.id}")
            print(f"   T√≠tulo: {post.title}")
            print(f"   Autor: {post.author}")
            print(f"   Fecha: {post.created_at}")
            print(f"   Estado: {post.status}")
            
            # Verificar contenido problem√°tico
            if post.content:
                content_length = len(post.content)
                print(f"   Tama√±o contenido: {content_length} caracteres")
                
                # Buscar elementos de video
                video_indicators = ['<video', 'youtube', 'vimeo', 'embed', 'iframe', 'media']
                found_video = []
                
                for indicator in video_indicators:
                    if indicator in post.content.lower():
                        found_video.append(indicator)
                
                if found_video:
                    print(f"   üé• Contiene video: {', '.join(found_video)}")
                    print(f"   ‚ö†Ô∏è POSIBLE CAUSA DEL ERROR")
                    
                    # Mostrar fragmento del contenido con video
                    content_lower = post.content.lower()
                    for indicator in found_video:
                        index = content_lower.find(indicator)
                        if index != -1:
                            start = max(0, index - 50)
                            end = min(len(post.content), index + 200)
                            fragment = post.content[start:end]
                            print(f"   üìù Fragmento ({indicator}): ...{fragment}...")
                            break
                else:
                    print(f"   üìù Sin elementos de video detectados")
            else:
                print(f"   üìù Sin contenido")
        
        return recent_posts
        
    except Exception as e:
        print(f"‚ùå Error buscando posts: {e}")
        return []

def backup_problematic_post(post):
    """Hacer backup de un post problem√°tico."""
    print(f"\nüíæ Haciendo backup del post ID {post.id}...")
    
    try:
        backup_data = {
            'id': post.id,
            'title': post.title,
            'content': post.content,
            'author': post.author.username,
            'created_at': str(post.created_at),
            'status': post.status
        }
        
        # Guardar backup en archivo
        import json
        backup_filename = f"post_backup_{post.id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        with open(backup_filename, 'w', encoding='utf-8') as f:
            json.dump(backup_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ Backup guardado: {backup_filename}")
        return backup_filename
        
    except Exception as e:
        print(f"‚ùå Error haciendo backup: {e}")
        return None

def fix_problematic_post(post):
    """Intentar arreglar un post problem√°tico."""
    print(f"\nüîß Intentando arreglar post ID {post.id}...")
    
    try:
        original_content = post.content
        
        if not original_content:
            print("   ‚ÑπÔ∏è Post sin contenido, no hay nada que arreglar")
            return False
        
        # Hacer backup primero
        backup_file = backup_problematic_post(post)
        if not backup_file:
            print("   ‚ùå No se pudo hacer backup, abortando")
            return False
        
        # Limpiar contenido problem√°tico
        cleaned_content = original_content
        
        # Remover elementos de video problem√°ticos
        import re
        
        # Patrones problem√°ticos comunes
        problematic_patterns = [
            r'<video[^>]*>.*?</video>',  # Tags de video
            r'<iframe[^>]*>.*?</iframe>',  # iframes
            r'<embed[^>]*>.*?</embed>',  # embeds
            r'<object[^>]*>.*?</object>',  # objects
        ]
        
        changes_made = False
        
        for pattern in problematic_patterns:
            if re.search(pattern, cleaned_content, re.IGNORECASE | re.DOTALL):
                print(f"   üßπ Removiendo patr√≥n: {pattern[:30]}...")
                cleaned_content = re.sub(pattern, '', cleaned_content, flags=re.IGNORECASE | re.DOTALL)
                changes_made = True
        
        # Limpiar HTML malformado
        if '<' in cleaned_content and '>' in cleaned_content:
            # Remover tags sin cerrar o malformados
            cleaned_content = re.sub(r'<[^>]*$', '', cleaned_content)  # Tags sin cerrar al final
            cleaned_content = re.sub(r'^[^<]*>', '', cleaned_content)  # Tags sin abrir al inicio
        
        if changes_made:
            # Guardar contenido limpio
            post.content = cleaned_content
            post.save()
            
            print(f"   ‚úÖ Post limpiado y guardado")
            print(f"   üìä Tama√±o original: {len(original_content)} chars")
            print(f"   üìä Tama√±o limpio: {len(cleaned_content)} chars")
            return True
        else:
            print(f"   ‚ÑπÔ∏è No se encontraron patrones problem√°ticos")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Error arreglando post: {e}")
        return False

def emergency_disable_post(post):
    """Deshabilitar un post como medida de emergencia."""
    print(f"\nüö® Deshabilitando post ID {post.id} como medida de emergencia...")
    
    try:
        # Hacer backup primero
        backup_file = backup_problematic_post(post)
        
        # Cambiar estado a draft
        post.status = 'draft'
        post.save()
        
        print(f"   ‚úÖ Post cambiado a estado 'draft'")
        print(f"   üíæ Backup disponible: {backup_file}")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Error deshabilitando post: {e}")
        return False

def test_site_recovery():
    """Probar si el sitio se ha recuperado."""
    print(f"\nüß™ Probando recuperaci√≥n del sitio...")
    
    try:
        # Intentar operaciones b√°sicas de Django
        from django.test import Client
        
        client = Client()
        
        # Probar p√°gina principal
        try:
            response = client.get('/')
            print(f"   üìÑ P√°gina principal: Status {response.status_code}")
            
            if response.status_code == 200:
                print(f"   ‚úÖ P√°gina principal funciona")
                return True
            else:
                print(f"   ‚ùå P√°gina principal devuelve {response.status_code}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Error accediendo p√°gina principal: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error probando recuperaci√≥n: {e}")
        return False

def main():
    """Funci√≥n principal de recuperaci√≥n."""
    print("üö® RECUPERACI√ìN DE EMERGENCIA - ERROR 500\n")
    
    try:
        # 1. Encontrar posts problem√°ticos
        recent_posts = find_problematic_post()
        
        if not recent_posts:
            print("‚ÑπÔ∏è No se encontraron posts recientes problem√°ticos")
            return
        
        # 2. Intentar arreglar cada post problem√°tico
        fixed_posts = []
        disabled_posts = []
        
        for post in recent_posts:
            if post.content and any(indicator in post.content.lower() 
                                  for indicator in ['<video', 'youtube', 'vimeo', 'embed', 'iframe']):
                
                print(f"\nüéØ Procesando post problem√°tico: {post.title}")
                
                # Intentar arreglar primero
                if fix_problematic_post(post):
                    fixed_posts.append(post)
                    
                    # Probar si el sitio se recuper√≥
                    if test_site_recovery():
                        print(f"‚úÖ ¬°Sitio recuperado despu√©s de arreglar post {post.id}!")
                        break
                else:
                    # Si no se puede arreglar, deshabilitar
                    if emergency_disable_post(post):
                        disabled_posts.append(post)
                        
                        # Probar si el sitio se recuper√≥
                        if test_site_recovery():
                            print(f"‚úÖ ¬°Sitio recuperado despu√©s de deshabilitar post {post.id}!")
                            break
        
        # 3. Resumen de acciones
        print(f"\nüìä Resumen de recuperaci√≥n:")
        print(f"   üîß Posts arreglados: {len(fixed_posts)}")
        print(f"   üö® Posts deshabilitados: {len(disabled_posts)}")
        
        if fixed_posts:
            print(f"   ‚úÖ Posts arreglados:")
            for post in fixed_posts:
                print(f"     ‚Ä¢ ID {post.id}: {post.title}")
        
        if disabled_posts:
            print(f"   ‚ö†Ô∏è Posts deshabilitados (revisar manualmente):")
            for post in disabled_posts:
                print(f"     ‚Ä¢ ID {post.id}: {post.title}")
        
        # 4. Prueba final
        if test_site_recovery():
            print(f"\nüéâ ¬°RECUPERACI√ìN EXITOSA!")
            print(f"   El sitio deber√≠a estar funcionando ahora")
        else:
            print(f"\n‚ùå El sitio a√∫n no funciona")
            print(f"   Puede requerir intervenci√≥n manual adicional")
        
        print(f"\nüí° Pr√≥ximos pasos:")
        print(f"   1. Verificar que el sitio funciona: docker-compose restart web")
        print(f"   2. Revisar posts deshabilitados y arreglarlos manualmente")
        print(f"   3. Restaurar desde backup si es necesario")
        
    except Exception as e:
        print(f"\n‚ùå Error durante la recuperaci√≥n: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()