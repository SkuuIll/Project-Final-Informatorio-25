#!/usr/bin/env python3
"""
Script para verificar que los imports est√°n corregidos y reiniciar el servicio.
"""

import os
import subprocess
import time

def check_imports():
    """Verificar que los imports est√°n corregidos."""
    print("üîç Verificando imports corregidos...\n")
    
    # Verificar que no hay imports problem√°ticos
    problematic_patterns = [
        "from .services import",
        "from .prompt_manager import", 
        "from .forms import",
        "from .ai_generator import"
    ]
    
    file_path = "posts/views/main.py"
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        problems_found = []
        
        for pattern in problematic_patterns:
            if pattern in content:
                problems_found.append(pattern)
        
        if problems_found:
            print("‚ùå A√∫n hay imports problem√°ticos:")
            for problem in problems_found:
                print(f"   ‚Ä¢ {problem}")
            return False
        else:
            print("‚úÖ Todos los imports est√°n corregidos")
            return True
            
    except Exception as e:
        print(f"‚ùå Error verificando imports: {e}")
        return False

def restart_web_service():
    """Reiniciar el servicio web."""
    print("\nüîÑ Reiniciando servicio web...\n")
    
    try:
        # Reiniciar el servicio web
        print("üõë Deteniendo servicio web...")
        result = subprocess.run(['docker-compose', 'restart', 'web'], 
                              capture_output=True, text=True, timeout=60)
        
        if result.returncode == 0:
            print("‚úÖ Servicio web reiniciado exitosamente")
            return True
        else:
            print(f"‚ùå Error reiniciando servicio: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚è∞ Timeout reiniciando servicio")
        return False
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def wait_for_service():
    """Esperar a que el servicio est√© listo."""
    print("\n‚è≥ Esperando a que el servicio est√© listo...\n")
    
    max_attempts = 30
    attempt = 0
    
    while attempt < max_attempts:
        try:
            # Verificar logs para ver si hay errores
            result = subprocess.run(['docker-compose', 'logs', '--tail=10', 'web'], 
                                  capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0:
                logs = result.stdout
                
                # Buscar indicadores de que el servicio est√° funcionando
                if "Booting worker" in logs or "Application startup complete" in logs or "Listening at" in logs:
                    print("‚úÖ Servicio web est√° funcionando")
                    return True
                
                # Buscar errores
                if "ModuleNotFoundError" in logs or "ImportError" in logs:
                    print("‚ùå A√∫n hay errores de import en los logs")
                    print("üìã √öltimos logs:")
                    print(logs[-500:])  # √öltimos 500 caracteres
                    return False
            
            attempt += 1
            print(f"‚è≥ Intento {attempt}/{max_attempts}...")
            time.sleep(2)
            
        except Exception as e:
            print(f"‚ùå Error verificando servicio: {e}")
            attempt += 1
            time.sleep(2)
    
    print("‚è∞ Timeout esperando el servicio")
    return False

def test_site():
    """Probar que el sitio funciona."""
    print("\nüß™ Probando que el sitio funciona...\n")
    
    try:
        # Intentar hacer una petici√≥n HTTP simple
        import urllib.request
        import urllib.error
        
        try:
            response = urllib.request.urlopen('http://localhost:8000/', timeout=10)
            status_code = response.getcode()
            
            if status_code == 200:
                print("‚úÖ ¬°Sitio web funciona correctamente!")
                return True
            else:
                print(f"‚ö†Ô∏è Sitio responde con c√≥digo {status_code}")
                return False
                
        except urllib.error.HTTPError as e:
            print(f"‚ùå Error HTTP: {e.code}")
            return False
        except urllib.error.URLError as e:
            print(f"‚ùå Error de conexi√≥n: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error probando sitio: {e}")
        return False

def main():
    """Funci√≥n principal."""
    print("üîß CORRECCI√ìN Y REINICIO DEL SERVICIO WEB\n")
    
    # 1. Verificar imports
    if not check_imports():
        print("‚ùå Los imports no est√°n corregidos correctamente")
        return
    
    # 2. Reiniciar servicio
    if not restart_web_service():
        print("‚ùå No se pudo reiniciar el servicio")
        return
    
    # 3. Esperar a que est√© listo
    if not wait_for_service():
        print("‚ùå El servicio no se inici√≥ correctamente")
        print("\nüí° Comandos para debugging:")
        print("   docker-compose logs -f web")
        print("   docker-compose ps")
        return
    
    # 4. Probar el sitio
    if test_site():
        print("\nüéâ ¬°PROBLEMA RESUELTO!")
        print("   El sitio web est√° funcionando correctamente")
        print("   Ya puedes acceder normalmente")
    else:
        print("\n‚ö†Ô∏è El servicio se reinici√≥ pero el sitio a√∫n no responde")
        print("   Puede necesitar unos minutos m√°s para estar completamente listo")
    
    print("\nüìã Resumen de la correcci√≥n:")
    print("   üîß Problema: Imports incorrectos despu√©s de mover vistas")
    print("   ‚úÖ Soluci√≥n: Corregidos imports relativos (. ‚Üí ..)")
    print("   üîÑ Acci√≥n: Servicio web reiniciado")
    
    print("\nüí° Si el problema persiste:")
    print("   docker-compose down && docker-compose up -d")

if __name__ == "__main__":
    main()