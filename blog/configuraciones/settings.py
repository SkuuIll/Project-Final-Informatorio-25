"""
Django settings for blog project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
import sys
from pathlib import Path
from dotenv import load_dotenv

BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Crear directorio de logs si no existe
LOGS_DIR = BASE_DIR / "logs"
LOGS_DIR.mkdir(exist_ok=True)

# Detectar entorno y cargar variables apropiadas
ENVIRONMENT = os.environ.get('ENVIRONMENT', 'development')

# Cargar variables de entorno desde el archivo apropiado
if ENVIRONMENT == 'production' or os.path.exists('/.dockerenv'):
    # Estamos en Docker o producción
    env_file = os.path.join(BASE_DIR, ".env.docker")
    if os.path.exists(env_file):
        load_dotenv(env_file)
    else:
        load_dotenv(os.path.join(BASE_DIR, ".env"))
else:
    # Desarrollo local
    load_dotenv(os.path.join(BASE_DIR, ".env"))

SECRET_KEY = os.environ.get("SECRET_KEY", "django-insecure-fallback-key")

DEBUG = os.environ.get("DEBUG", "False").lower() in ("true", "1", "t")

ALLOWED_HOSTS = ["localhost", "127.0.0.1"]

ALLOWED_HOSTS_FROM_ENV = os.environ.get("ALLOWED_HOSTS")
if ALLOWED_HOSTS_FROM_ENV:
    ALLOWED_HOSTS.extend(ALLOWED_HOSTS_FROM_ENV.split(","))

CSRF_TRUSTED_ORIGINS = [f"https://{host}" for host in ALLOWED_HOSTS if host not in ["localhost", "127.0.0.1"]]


# Application definition

INSTALLED_APPS = [
    "jazzmin",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    # Apps de Channels
    "channels",
    # Apps de terceros
    "django_ckeditor_5",
    "taggit",
    "rest_framework",
    "turnstile",
    "crispy_forms",
    "crispy_bootstrap5",
    "django_extensions",
    "django_prometheus",
    "axes",

    # Mis apps
    "blog",
    "posts",
    "accounts",
]

# Claves de Cloudflare Turnstile
TURNSTILE_SITE_KEY = os.environ.get("TURNSTILE_SITE_KEY")
TURNSTILE_SECRET_KEY = os.environ.get("TURNSTILE_SECRET_KEY")

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_ratelimit.middleware.RatelimitMiddleware",
    "axes.middleware.AxesMiddleware",
    # Middleware de caché después de AuthenticationMiddleware
    "blog.middleware.cache_middleware.SmartCacheMiddleware",
    "blog.middleware.cache_middleware.APIResponseCacheMiddleware",
]

# Configuración de monitoreo de base de datos
SLOW_QUERY_THRESHOLD_MS = 100  # Umbral para consultas lentas en ms
QUERY_COUNT_THRESHOLD = 20     # Umbral para detectar problemas N+1
MONITOR_DB_QUERIES = not DEBUG  # Monitorear en producción

# Configuración de PgBouncer
USE_PGBOUNCER = os.environ.get('USE_PGBOUNCER', 'False').lower() in ('true', '1', 't')
PGBOUNCER_HOST = os.environ.get('PGBOUNCER_HOST', 'localhost')
PGBOUNCER_PORT = os.environ.get('PGBOUNCER_PORT', '6432')

# Añadir middleware de monitoreo de consultas (versión compatible con async/sync)
if DEBUG or MONITOR_DB_QUERIES:
    MIDDLEWARE.append("blog.middleware.async_safe_monitoring.AsyncSafeQueryMonitoringMiddleware")
    
    # Configuración para consultas lentas
    SLOW_QUERY_THRESHOLD = 0.1  # 100ms

ROOT_URLCONF = "blog.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "blog.configuraciones.context_processors.notifications_context",
            ],
        },
    },
]

WSGI_APPLICATION = "blog.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# Configuración de base de datos según el entorno
def configure_database():
    """Configura la base de datos según el entorno."""
    use_postgresql = os.environ.get('USE_POSTGRESQL', 'False').lower() in ('true', '1', 't')
    
    if use_postgresql or ENVIRONMENT == 'production' or os.path.exists('/.dockerenv'):
        # Usar PostgreSQL en producción/Docker
        return {
            "default": {
                "ENGINE": "django.db.backends.postgresql",
                "NAME": os.environ.get("POSTGRES_DB", "devblog"),
                "USER": os.environ.get("POSTGRES_USER", "postgres"),
                "PASSWORD": os.environ.get("POSTGRES_PASSWORD", "postgres"),
                "HOST": os.environ.get("POSTGRES_HOST", "localhost"),
                "PORT": os.environ.get("POSTGRES_PORT", "5432"),
                "OPTIONS": {
                    "connect_timeout": 10,
                    "application_name": "devblog",
                    "client_encoding": "UTF8",
                },
                # Configuración de conexión optimizada
                "CONN_MAX_AGE": 60,  # Mantener conexiones abiertas por 60 segundos
                "CONN_HEALTH_CHECKS": True,  # Verificar salud de conexiones
            }
        }
    else:
        # Usar SQLite en desarrollo local
        return {
            "default": {
                "ENGINE": "django.db.backends.sqlite3",
                "NAME": BASE_DIR / "db.sqlite3",
            }
        }

DATABASES = configure_database()
# Configuración adicional para PostgreSQL en producción
if DATABASES["default"]["ENGINE"] == "django.db.backends.postgresql":
    # Configure PgBouncer if enabled
    if USE_PGBOUNCER:
        # Override database connection settings to use PgBouncer
        DATABASES["default"]["HOST"] = PGBOUNCER_HOST
        DATABASES["default"]["PORT"] = PGBOUNCER_PORT
        
        # PgBouncer in transaction pooling mode requires these settings
        DATABASES["default"]["OPTIONS"]["prepared_statements"] = False
        
        # Log that we're using PgBouncer
        import logging
        logging.getLogger('django.db.backends').info(
            f"Using PgBouncer for database connection pooling: {PGBOUNCER_HOST}:{PGBOUNCER_PORT}"
        )
    
    # Configuración para múltiples bases de datos (lectura/escritura)
    if os.environ.get("POSTGRES_READ_HOST"):
        DATABASES["read_replica"] = {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.environ.get("POSTGRES_DB", "devblog"),
            "USER": os.environ.get("POSTGRES_USER", "postgres"),
            "PASSWORD": os.environ.get("POSTGRES_PASSWORD", "postgres"),
            "HOST": os.environ.get("POSTGRES_READ_HOST"),
            "PORT": os.environ.get("POSTGRES_PORT", "5432"),
            "OPTIONS": {
                "client_encoding": "UTF8",
            },
            "CONN_MAX_AGE": 60,
            "TEST": {
                "MIRROR": "default",
            },
        }
        
        # Router de base de datos para separar lecturas/escrituras
        DATABASE_ROUTERS = ["blog.db_router.ReadReplicaRouter"]


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "es-ar"

TIME_ZONE = "America/Argentina/Buenos_Aires"

USE_I18N = True

USE_TZ = True

# Configuración de Celery
def configure_celery():
    """Configura Celery según el entorno."""
    redis_url = os.environ.get('REDIS_URL')
    
    if redis_url and (ENVIRONMENT == 'production' or os.path.exists('/.dockerenv')):
        # Usar Redis para Celery en producción/Docker
        return {
            'CELERY_BROKER_URL': os.environ.get('CELERY_BROKER_URL', redis_url.replace('/1', '/0')),
            'CELERY_RESULT_BACKEND': os.environ.get('CELERY_RESULT_BACKEND', redis_url.replace('/1', '/0')),
            'CELERY_TASK_ALWAYS_EAGER': False,
            'CELERY_TASK_EAGER_PROPAGATES': False,
        }
    else:
        # Ejecutar tareas síncronamente en desarrollo
        return {
            'CELERY_TASK_ALWAYS_EAGER': True,
            'CELERY_TASK_EAGER_PROPAGATES': True,
            'CELERY_BROKER_URL': 'memory://',
            'CELERY_RESULT_BACKEND': 'cache+memory://',
        }

# Aplicar configuración de Celery
celery_config = configure_celery()
for key, value in celery_config.items():
    globals()[key] = value
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutos
CELERY_WORKER_HIJACK_ROOT_LOGGER = False
CELERY_WORKER_MAX_TASKS_PER_CHILD = 1000  # Reiniciar worker después de 1000 tareas



STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR / "static"]
STATIC_ROOT = BASE_DIR / "staticfiles"

# Static files optimization
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# Whitenoise configuration for better static file serving
WHITENOISE_USE_FINDERS = True
WHITENOISE_AUTOREFRESH = DEBUG

# Configuración de caché (necesario para rate limiting)
def configure_cache():
    """Configura el sistema de caché según el entorno."""
    redis_url = os.environ.get('REDIS_URL')
    
    if redis_url and (ENVIRONMENT == 'production' or os.path.exists('/.dockerenv')):
        # Usar Redis en producción/Docker
        try:
            return {
                'default': {
                    'BACKEND': 'django.core.cache.backends.redis.RedisCache',
                    'LOCATION': redis_url,
                    'KEY_PREFIX': 'devblog',
                    'TIMEOUT': 300,
                    'OPTIONS': {
                        'CONNECTION_POOL_KWARGS': {
                            'retry_on_timeout': True,
                            'socket_connect_timeout': 5,
                            'socket_timeout': 5,
                            'max_connections': 20,
                        }
                    }
                }
            }
        except Exception as e:
            print(f"Warning: Redis no disponible, usando caché local: {e}")
    
    # Fallback a caché local
    return {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'devblog-cache',
            'TIMEOUT': 300,
            'OPTIONS': {
                'MAX_ENTRIES': 1000,
            }
        }
    }

CACHES = configure_cache()


MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"


DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    "axes.backends.AxesStandaloneBackend",
)

DATA_UPLOAD_MAX_MEMORY_SIZE = 8388608  # 8 MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 8388608  # 8 MB

# Configuración de Rate Limiting
RATELIMIT_ENABLE = True
RATELIMIT_USE_CACHE = "default"

# Configuración de protección DDoS
DDOS_THRESHOLD = os.environ.get('DDOS_THRESHOLD', '100/m')
DDOS_BLOCK_DURATION = int(os.environ.get('DDOS_BLOCK_DURATION', '3600'))  # 1 hora

# IPs en whitelist para rate limiting
RATE_LIMIT_WHITELIST_IPS = [
    '127.0.0.1',
    '::1',
]

# User-Agents permitidos (bots legítimos)
ALLOWED_USER_AGENTS = [
    'googlebot', 'bingbot', 'slurp', 'duckduckbot',
    'baiduspider', 'yandexbot', 'facebookexternalhit',
    'twitterbot', 'linkedinbot'
]

# User-Agents sospechosos
SUSPICIOUS_USER_AGENTS = [
    'bot', 'crawler', 'spider', 'scraper', 'curl', 'wget',
    'python-requests', 'python-urllib', 'scrapy', 'mechanize'
]

# Configuración de django-axes (actualizada para versión 8.0+)
AXES_FAILURE_LIMIT = 5  # Número de intentos fallidos antes de bloquear
AXES_COOLOFF_TIME = 1  # Tiempo de bloqueo en horas
AXES_LOCKOUT_URL = "/accounts/locked/"
AXES_RESET_ON_SUCCESS = True
AXES_LOCKOUT_CALLABLE = 'accounts.axes_views.locked_out'
AXES_ENABLE_ADMIN = True
AXES_VERBOSE = True
AXES_HANDLER = 'axes.handlers.database.AxesDatabaseHandler'
# Configuración moderna para django-axes 8.0+
AXES_LOCK_OUT_BY_COMBINATION_USER_AND_IP = True

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
        "json": {
            "()": "pythonjsonlogger.jsonlogger.JsonFormatter",
            "format": "%(asctime)s %(name)s %(levelname)s %(message)s %(pathname)s %(lineno)s",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "file": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(BASE_DIR, "logs", "devblog.log"),
            "maxBytes": 1024*1024*5,  # 5 MB
            "backupCount": 5,
            "formatter": "verbose",
        },
        "error_file": {
            "level": "ERROR",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(BASE_DIR, "logs", "errors.log"),
            "maxBytes": 1024*1024*5,  # 5 MB
            "backupCount": 5,
            "formatter": "verbose",
        },
        "db_file": {
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(BASE_DIR, "logs", "db_queries.log"),
            "maxBytes": 1024*1024*10,  # 10 MB
            "backupCount": 5,
            "formatter": "json",
        },
        "slow_queries": {
            "level": "WARNING",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(BASE_DIR, "logs", "slow_queries.log"),
            "maxBytes": 1024*1024*5,  # 5 MB
            "backupCount": 5,
            "formatter": "json",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "django": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": False,
        },
        "django.request": {
            "handlers": ["console", "error_file"],
            "level": "ERROR",
            "propagate": False,
        },
        "django.db.backends": {
            "handlers": ["db_file", "slow_queries"],
            "level": "DEBUG" if DEBUG else "WARNING",
            "propagate": False,
        },
        "blog.db_monitoring": {
            "handlers": ["db_file", "slow_queries", "console"],
            "level": "DEBUG" if DEBUG else "WARNING",
            "propagate": False,
        },
        "posts": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": False,
        },
        "accounts": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": False,
        },
    },
}

JAZZMIN_SETTINGS = {
    # Títulos e Iconos
    "site_title": "Mi Admin",
    "site_header": "Mi Proyecto",
    "site_brand": "Proyecto Final",
    "welcome_sign": "Bienvenido a Mi Proyecto",
    "copyright": "Mi Proyecto Ltd.",
    "search_model": "auth.User",
    # --- Menú Superior ---
    "topmenu_links": [
        # Ver Sitio
        {"name": "Ver Sitio", "url": "/", "new_window": True},
        # Modelos principales en el menú superior
        {"model": "auth.User"},
        {"model": "posts.Post"},
        # Enlace externo
        {
            "name": "Soporte Jazzmin",
            "url": "https://github.com/farridav/django-jazzmin/issues",
            "new_window": False,
        },
    ],
    # --- Menú de Usuario ---
    "usermenu_links": [
        {
            "name": "Soporte Jazzmin",
            "url": "https://github.com/farridav/django-jazzmin/issues",
            "new_window": False,
        },
        {"model": "auth.user"},
    ],
    # --- Menú Lateral ---
    "show_sidebar": True,
    "navigation_expanded": True,
    "hide_apps": [],
    "hide_models": [],
    "order_with_respect_to": ["auth", "posts", "accounts"],
    "custom_links": {
        "posts": [
            # Removed "Gestionar Modelo IA" link as per request
        ]
    },
    "icons": {
        "auth": "fas fa-users-cog",
        "auth.user": "fas fa-user",
        "auth.Group": "fas fa-users",
        "posts.Post": "fas fa-newspaper",
        "posts.Comment": "fas fa-comments",
        "accounts.Profile": "fas fa-id-card",
        "posts.AIModel": "fas fa-robot",
    },
    "default_icon_parents": "fas fa-chevron-circle-right",
    "default_icon_children": "fas fa-circle",
    # --- UI Customizer (Selector de Temas) ---
    "show_ui_builder": False,
    "changeform_format": "horizontal_tabs",
    "related_modal_active": True,
    "custom_css": "css/custom_admin.css",
}



CKEDITOR_5_CONFIGS = {
    "default": {
        "toolbar": [
            "heading",
            "|",
            "bold",
            "italic",
            "underline",
            "strikethrough",
            "link",
            "|",
            "fontFamily",
            "fontSize",
            "fontColor",
            "fontBackgroundColor",
            "|",
            "alignment",
            "|",
            "bulletedList",
            "numberedList",
            "outdent",
            "indent",
            "|",
            "blockQuote",
            "insertTable",
            "mediaEmbed",
            "codeBlock",
            "horizontalLine",
            "|",
            "imageUpload",
            "|",
            "undo",
            "redo",
        ],
        "image": {
            "toolbar": [
                "imageTextAlternative",
                "imageStyle:alignLeft",
                "imageStyle:alignCenter",
                "imageStyle:alignRight",
                "|",
                "toggleImageCaption",
                "|",
                "linkImage"
            ],
            "styles": [
                "alignLeft",
                "alignCenter",
                "alignRight"
            ]
        },
        "table": {
            "contentToolbar": [
                "tableColumn",
                "tableRow",
                "mergeTableCells",
                "tableProperties",
                "tableCellProperties"
            ]
        },
        "imageUpload": {
            "uploadUrl": "/ckeditor5/upload/",
        },
    }
}

CKEDITOR_5_UPLOAD_PATH = "uploads/"
CKEDITOR_5_BROWSE_URL = "/media/uploads/"

# --- Test  ---
TESTING = 'test' in sys.argv

if TESTING:
    SECRET_KEY = "a-dummy-secret-key-for-testing"
    DEBUG = False
    PASSWORD_HASHERS = [
        "django.contrib.auth.hashers.MD5PasswordHasher",
    ]
    TURNSTILE_SITE_KEY = None
    TURNSTILE_SECRET_KEY = None
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": ":memory:",
        }
    }
    EMAIL_BACKEND = "django.core.mail.backends.locmem.EmailBackend"


if not TESTING:
    if DEBUG:
        EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
    else:
        # Production settings
        SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
        MIDDLEWARE.insert(1, "whitenoise.middleware.WhiteNoiseMiddleware")
        STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
        
        # Security settings
        SECURE_SSL_REDIRECT = True
        SECURE_HSTS_SECONDS = 31536000
        SECURE_HSTS_INCLUDE_SUBDOMAINS = True
        SECURE_HSTS_PRELOAD = True
        SECURE_CONTENT_TYPE_NOSNIFF = True
        SECURE_BROWSER_XSS_FILTER = True
        SESSION_COOKIE_SECURE = True
        CSRF_COOKIE_SECURE = True


# Channels
ASGI_APPLICATION = "blog.asgi.application"
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    }
}

# Configuración de Django Rest Framework
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.UserRateThrottle',
        'rest_framework.throttling.AnonRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'user': '100/minute',
        'anon': '30/minute',
    },
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
}
