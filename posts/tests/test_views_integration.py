"""
Tests para la integración de generación de imágenes en las vistas.
"""

from django.test import TestCase, Client
from django.contrib.auth.models import User
from django.urls import reverse
from unittest.mock import patch, Mock
from posts.models import Post
from posts.forms import AiPostGeneratorForm


class TestAiPostGeneratorViewIntegration(TestCase):\n    \"\"\"Tests para la vista de generación de posts con IA\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuración inicial para los tests\"\"\"\n        self.client = Client()\n        self.user = User.objects.create_user(\n            username='testuser',\n            email='test@example.com',\n            password='testpass123'\n        )\n        self.client.login(username='testuser', password='testpass123')\n        \n        # URL de la vista\n        self.url = reverse('ai_post_generator')  # Ajustar según tu configuración de URLs\n        \n    def test_form_displays_new_image_options(self):\n        \"\"\"Test que el formulario muestra las nuevas opciones de imagen\"\"\"\n        \n        response = self.client.get(self.url)\n        \n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, 'generate_cover_image')\n        self.assertContains(response, 'cover_image_style')\n        self.assertContains(response, 'use_existing_image')\n        self.assertContains(response, 'existing_image')\n        \n    def test_form_validation_with_new_fields(self):\n        \"\"\"Test validación del formulario con los nuevos campos\"\"\"\n        \n        form_data = {\n            'url': 'https://example.com/test-article',\n            'rewrite_prompt': 'Reescribe este contenido',\n            'extract_images': True,\n            'max_images': 3,\n            'generate_cover_image': True,\n            'cover_image_style': 'professional',\n            'use_existing_image': False,\n            'status': 'draft'\n        }\n        \n        form = AiPostGeneratorForm(data=form_data)\n        self.assertTrue(form.is_valid())\n        \n    @patch('posts.views.generate_complete_post')\n    def test_post_generation_with_cover_image_enabled(self, mock_generate):\n        \"\"\"Test generación de post con imagen de portada habilitada\"\"\"\n        \n        # Mock successful generation\n        mock_generate.return_value = {\n            'success': True,\n            'title': 'Generated Title',\n            'content': 'Generated content',\n            'tags': ['tech', 'ai'],\n            'reading_time': 3,\n            'cover_image_url': '/media/covers/test_image.jpg'\n        }\n        \n        form_data = {\n            'url': 'https://example.com/test-article',\n            'rewrite_prompt': 'Reescribe este contenido',\n            'extract_images': True,\n            'max_images': 5,\n            'generate_cover_image': True,\n            'cover_image_style': 'modern',\n            'status': 'draft'\n        }\n        \n        response = self.client.post(self.url, data=form_data)\n        \n        # Verify generate_complete_post was called with correct parameters\n        mock_generate.assert_called_once_with(\n            url='https://example.com/test-article',\n            rewrite_prompt='Reescribe este contenido',\n            extract_images=True,\n            max_images=5,\n            title=None,\n            generate_cover=True,\n            image_style='modern'\n        )\n        \n        # Verify post was created\n        self.assertEqual(Post.objects.count(), 1)\n        post = Post.objects.first()\n        self.assertEqual(post.title, 'Generated Title')\n        self.assertEqual(post.content, 'Generated content')\n        self.assertEqual(post.author, self.user)\n        \n    @patch('posts.views.generate_complete_post')\n    def test_post_generation_with_cover_image_disabled(self, mock_generate):\n        \"\"\"Test generación de post con imagen de portada deshabilitada\"\"\"\n        \n        # Mock successful generation without cover image\n        mock_generate.return_value = {\n            'success': True,\n            'title': 'Generated Title',\n            'content': 'Generated content',\n            'tags': ['tech'],\n            'reading_time': 2\n        }\n        \n        form_data = {\n            'url': 'https://example.com/test-article',\n            'rewrite_prompt': 'Reescribe este contenido',\n            'extract_images': False,\n            'generate_cover_image': False,\n            'status': 'published'\n        }\n        \n        response = self.client.post(self.url, data=form_data)\n        \n        # Verify generate_complete_post was called with generate_cover=False\n        mock_generate.assert_called_once_with(\n            url='https://example.com/test-article',\n            rewrite_prompt='Reescribe este contenido',\n            extract_images=False,\n            max_images=5,  # Default value\n            title=None,\n            generate_cover=False,\n            image_style='professional'  # Default value\n        )\n        \n        # Verify post was created with published status\n        post = Post.objects.first()\n        self.assertEqual(post.status, 'published')\n        \n    @patch('posts.views.generate_complete_post')\n    @patch('posts.views.ImageSelector')\n    def test_post_generation_with_existing_image_selection(self, mock_selector, mock_generate):\n        \"\"\"Test generación de post con imagen existente seleccionada\"\"\"\n        \n        # Mock image selector validation\n        mock_selector.validate_image_selection.return_value = (True, None)\n        \n        # Mock successful generation\n        mock_generate.return_value = {\n            'success': True,\n            'title': 'Generated Title',\n            'content': 'Generated content',\n            'tags': ['tech'],\n            'reading_time': 2\n        }\n        \n        # Mock file operations\n        with patch('posts.views.default_storage') as mock_storage, \\\n             patch('posts.views.ContentFile') as mock_content_file:\n            \n            mock_storage.open.return_value.__enter__.return_value.read.return_value = b'fake_image_data'\n            \n            form_data = {\n                'url': 'https://example.com/test-article',\n                'rewrite_prompt': 'Reescribe este contenido',\n                'generate_cover_image': False,\n                'use_existing_image': True,\n                'existing_image': 'uploads/existing_image.jpg',\n                'status': 'draft'\n            }\n            \n            response = self.client.post(self.url, data=form_data)\n            \n            # Verify image validation was called\n            mock_selector.validate_image_selection.assert_called_once_with('uploads/existing_image.jpg')\n            \n            # Verify post was created\n            post = Post.objects.first()\n            self.assertEqual(post.title, 'Generated Title')\n            \n    @patch('posts.views.generate_complete_post')\n    def test_post_generation_failure_handling(self, mock_generate):\n        \"\"\"Test manejo de fallos en la generación de posts\"\"\"\n        \n        # Mock generation failure\n        mock_generate.return_value = {\n            'success': False,\n            'error': 'Failed to extract content from URL'\n        }\n        \n        form_data = {\n            'url': 'https://invalid-url.com/article',\n            'rewrite_prompt': 'Reescribe este contenido',\n            'status': 'draft'\n        }\n        \n        response = self.client.post(self.url, data=form_data)\n        \n        # Should not create a post\n        self.assertEqual(Post.objects.count(), 0)\n        \n        # Should show error message\n        self.assertContains(response, 'Failed to extract content from URL')\n        \n    def test_custom_title_handling(self):\n        \"\"\"Test manejo de título personalizado\"\"\"\n        \n        with patch('posts.views.generate_complete_post') as mock_generate:\n            mock_generate.return_value = {\n                'success': True,\n                'title': 'Custom Title',  # Should use the custom title\n                'content': 'Generated content',\n                'tags': ['custom'],\n                'reading_time': 1\n            }\n            \n            form_data = {\n                'title': 'Custom Title',\n                'rewrite_prompt': 'Reescribe este contenido',\n                'generate_cover_image': False,\n                'status': 'draft'\n            }\n            \n            response = self.client.post(self.url, data=form_data)\n            \n            # Verify title parameter was passed\n            mock_generate.assert_called_once()\n            call_args = mock_generate.call_args\n            self.assertEqual(call_args.kwargs['title'], 'Custom Title')\n            \n            # Verify post was created with custom title\n            post = Post.objects.first()\n            self.assertEqual(post.title, 'Custom Title')\n            \n    @patch('posts.views.ImageSelector')\n    def test_available_images_context(self, mock_selector):\n        \"\"\"Test que las imágenes disponibles se pasan al contexto\"\"\"\n        \n        # Mock available images\n        mock_images = [\n            {\n                'path': 'uploads/image1.jpg',\n                'url': '/media/uploads/image1.jpg',\n                'filename': 'image1.jpg',\n                'dimensions': '800x600'\n            },\n            {\n                'path': 'uploads/image2.jpg',\n                'url': '/media/uploads/image2.jpg',\n                'filename': 'image2.jpg',\n                'dimensions': '1200x800'\n            }\n        ]\n        mock_selector.get_suitable_cover_images.return_value = mock_images\n        \n        response = self.client.get(self.url)\n        \n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.context['available_images'], mock_images)\n        mock_selector.get_suitable_cover_images.assert_called_once_with(limit=50)\n        \n    def test_form_field_defaults(self):\n        \"\"\"Test valores por defecto de los nuevos campos del formulario\"\"\"\n        \n        form = AiPostGeneratorForm()\n        \n        # Check default values\n        self.assertTrue(form.fields['generate_cover_image'].initial)\n        self.assertEqual(form.fields['cover_image_style'].initial, 'professional')\n        self.assertFalse(form.fields['use_existing_image'].initial)\n        \n    def test_form_field_choices(self):\n        \"\"\"Test opciones disponibles en los campos del formulario\"\"\"\n        \n        form = AiPostGeneratorForm()\n        \n        # Check style choices\n        style_choices = dict(form.fields['cover_image_style'].choices)\n        expected_styles = {\n            'professional': 'Profesional - Limpio y corporativo',\n            'modern': 'Moderno - Minimalista y contemporáneo',\n            'tech': 'Tecnológico - Digital y futurista',\n            'creative': 'Creativo - Artístico y vibrante'\n        }\n        \n        for key, value in expected_styles.items():\n            self.assertEqual(style_choices[key], value)\n            \n    @patch('posts.views.generate_complete_post')\n    def test_tag_handling_in_post_creation(self, mock_generate):\n        \"\"\"Test manejo de tags en la creación de posts\"\"\"\n        \n        mock_generate.return_value = {\n            'success': True,\n            'title': 'Test Title',\n            'content': 'Test content',\n            'tags': ['python', 'django', 'ai', 'machine-learning'],\n            'reading_time': 3\n        }\n        \n        form_data = {\n            'url': 'https://example.com/test',\n            'rewrite_prompt': 'Test prompt',\n            'status': 'draft'\n        }\n        \n        response = self.client.post(self.url, data=form_data)\n        \n        # Verify post was created with tags\n        post = Post.objects.first()\n        tag_names = [tag.name for tag in post.tags.all()]\n        \n        self.assertIn('python', tag_names)\n        self.assertIn('django', tag_names)\n        self.assertIn('ai', tag_names)\n        self.assertIn('machine-learning', tag_names)\n        \n    def test_login_required(self):\n        \"\"\"Test que la vista requiere autenticación\"\"\"\n        \n        # Logout user\n        self.client.logout()\n        \n        response = self.client.get(self.url)\n        \n        # Should redirect to login\n        self.assertEqual(response.status_code, 302)\n        self.assertIn('/login/', response.url)  # Ajustar según tu configuración\n        \n    @patch('posts.views.generate_complete_post')\n    def test_reading_time_saved_to_post(self, mock_generate):\n        \"\"\"Test que el tiempo de lectura se guarda en el post\"\"\"\n        \n        mock_generate.return_value = {\n            'success': True,\n            'title': 'Test Title',\n            'content': 'Test content',\n            'tags': ['test'],\n            'reading_time': 7  # 7 minutes\n        }\n        \n        form_data = {\n            'url': 'https://example.com/test',\n            'rewrite_prompt': 'Test prompt',\n            'status': 'draft'\n        }\n        \n        response = self.client.post(self.url, data=form_data)\n        \n        # Verify reading time was saved\n        post = Post.objects.first()\n        self.assertEqual(post.reading_time, 7)\n\n\nclass TestAdminIntegration(TestCase):\n    \"\"\"Tests para la integración en el admin\"\"\"\n    \n    def setUp(self):\n        self.user = User.objects.create_superuser(\n            username='admin',\n            email='admin@example.com',\n            password='adminpass123'\n        )\n        self.client = Client()\n        self.client.login(username='admin', password='adminpass123')\n        \n    @patch('posts.admin.generate_complete_post')\n    def test_admin_ai_post_generation(self, mock_generate):\n        \"\"\"Test generación de posts desde el admin\"\"\"\n        \n        mock_generate.return_value = {\n            'success': True,\n            'title': 'Admin Generated Title',\n            'content': 'Admin generated content',\n            'tags': ['admin', 'test'],\n            'reading_time': 2\n        }\n        \n        # This would be the admin URL for AI generation\n        # Adjust according to your admin URL configuration\n        url = '/admin/posts/post/generate-ai/'\n        \n        form_data = {\n            'url': 'https://example.com/admin-test',\n            'rewrite_prompt': 'Admin rewrite prompt',\n            'extract_images': True,\n            'max_images': 3\n        }\n        \n        response = self.client.post(url, data=form_data)\n        \n        # Verify function was called with generate_cover=True (default)\n        mock_generate.assert_called_once()\n        call_kwargs = mock_generate.call_args.kwargs\n        self.assertTrue(call_kwargs.get('generate_cover', False))\n        \n        # Verify post was created\n        self.assertEqual(Post.objects.count(), 1)\n        post = Post.objects.first()\n        self.assertEqual(post.title, 'Admin Generated Title')\n        self.assertEqual(post.author, self.user)\n"