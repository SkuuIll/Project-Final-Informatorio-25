"""
Tests funcionales para el flujo completo de generación de posts con imágenes.
"""

from django.test import TestCase, TransactionTestCase\nfrom django.contrib.auth.models import User\nfrom unittest.mock import patch, Mock, MagicMock\nfrom posts.ai_generator import generate_complete_post\nfrom posts.models import Post\nimport tempfile\nimport os\n\n\nclass TestCompletePostGenerationFlow(TransactionTestCase):\n    \"\"\"Test del flujo completo de generación de posts\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuración inicial\"\"\"\n        self.user = User.objects.create_user(\n            username='testuser',\n            email='test@example.com',\n            password='testpass123'\n        )\n        \n        # Test data\n        self.test_url = \"https://example.com/test-article\"\n        self.test_prompt = \"Reescribe este artículo de manera profesional y atractiva\"\n        \n    def test_complete_flow_with_all_features_enabled(self):\n        \"\"\"Test del flujo completo con todas las características habilitadas\"\"\"\n        \n        progress_steps = []\n        \n        def track_progress(step, percentage):\n            progress_steps.append((step, percentage))\n            print(f\"Progress: {percentage}% - {step}\")\n            \n        # Mock all external dependencies\n        with patch('posts.ai_generator.extract_content_from_url') as mock_extract, \\\n             patch('posts.ai_generator.rewrite_content_with_ai') as mock_rewrite, \\\n             patch('posts.ai_generator.generate_tags_with_ai') as mock_tags, \\\n             patch('posts.ai_generator.extract_images_from_url') as mock_extract_images, \\\n             patch('posts.ai_generator.download_image') as mock_download, \\\n             patch('posts.ai_generator.process_images_in_content') as mock_process_images, \\\n             patch('posts.ai_generator.registry') as mock_registry:\n            \n            # Setup mocks\n            mock_extract.return_value = {\n                'success': True,\n                'content': 'This is a test article about artificial intelligence and machine learning.'\n            }\n            \n            mock_rewrite.return_value = (\n                'AI and Machine Learning: A Comprehensive Guide',\n                'This comprehensive guide explores the fascinating world of artificial intelligence and machine learning, covering key concepts and practical applications.'\n            )\n            \n            mock_tags.return_value = ['ai', 'machine-learning', 'technology', 'programming', 'data-science']\n            \n            mock_extract_images.return_value = [\n                {'src': 'https://example.com/image1.jpg', 'alt': 'AI Concept'},\n                {'src': 'https://example.com/image2.jpg', 'alt': 'ML Algorithm'}\n            ]\n            \n            mock_download.side_effect = [\n                '/media/images/ai_concept.jpg',\n                '/media/images/ml_algorithm.jpg'\n            ]\n            \n            mock_process_images.return_value = 'Processed content with embedded images'\n            \n            # Mock image generation service\n            mock_service = Mock()\n            mock_service.generate_image.return_value = (\n                True, \n                '/media/covers/ai_ml_cover.jpg', \n                None\n            )\n            mock_registry.get_default_service.return_value = mock_service\n            \n            # Mock prompt builder\n            with patch('posts.ai_generator.CoverImagePromptBuilder') as mock_builder:\n                mock_builder.build_cover_prompt.return_value = \"Professional AI and ML cover image\"\n                \n                # Execute the complete flow\n                result = generate_complete_post(\n                    url=self.test_url,\n                    rewrite_prompt=self.test_prompt,\n                    extract_images=True,\n                    max_images=2,\n                    title=None,\n                    generate_cover=True,\n                    image_style='professional',\n                    progress_callback=track_progress\n                )\n                \n                # Verify result structure\n                self.assertTrue(result.get('success', True))\n                self.assertEqual(result['title'], 'AI and Machine Learning: A Comprehensive Guide')\n                self.assertEqual(result['content'], 'Processed content with embedded images')\n                self.assertEqual(result['tags'], ['ai', 'machine-learning', 'technology', 'programming', 'data-science'])\n                self.assertEqual(result['reading_time'], 1)  # Short content = 1 min\n                self.assertEqual(result['cover_image_url'], '/media/covers/ai_ml_cover.jpg')\n                self.assertEqual(len(result['images']), 2)\n                \n                # Verify progress tracking\n                self.assertTrue(len(progress_steps) > 0)\n                self.assertEqual(progress_steps[0][1], 0)  # Starts at 0%\n                self.assertEqual(progress_steps[-1][1], 100)  # Ends at 100%\n                \n                # Verify all steps were called\n                mock_extract.assert_called_once_with(self.test_url)\n                mock_rewrite.assert_called_once()\n                mock_tags.assert_called_once()\n                mock_extract_images.assert_called_once_with(self.test_url, 2)\n                self.assertEqual(mock_download.call_count, 2)\n                mock_process_images.assert_called_once()\n                mock_service.generate_image.assert_called_once()\n                \n    def test_flow_with_image_generation_failure_fallback(self):\n        \"\"\"Test flujo con fallo en generación de imagen pero éxito en contenido\"\"\"\n        \n        with patch('posts.ai_generator.extract_content_from_url') as mock_extract, \\\n             patch('posts.ai_generator.rewrite_content_with_ai') as mock_rewrite, \\\n             patch('posts.ai_generator.generate_tags_with_ai') as mock_tags, \\\n             patch('posts.ai_generator.registry') as mock_registry:\n            \n            # Setup successful content generation\n            mock_extract.return_value = {\n                'success': True,\n                'content': 'Test content'\n            }\n            mock_rewrite.return_value = ('Test Title', 'Test Content')\n            mock_tags.return_value = ['test']\n            \n            # Setup failing image service\n            mock_service = Mock()\n            mock_service.generate_image.side_effect = Exception(\"Image service unavailable\")\n            mock_registry.get_default_service.return_value = mock_service\n            \n            with patch('posts.ai_generator.CoverImagePromptBuilder') as mock_builder:\n                mock_builder.build_cover_prompt.return_value = \"Test prompt\"\n                \n                result = generate_complete_post(\n                    url=self.test_url,\n                    rewrite_prompt=self.test_prompt,\n                    extract_images=False,\n                    generate_cover=True\n                )\n                \n                # Should still succeed without cover image\n                self.assertTrue(result.get('success', True))\n                self.assertEqual(result['title'], 'Test Title')\n                self.assertEqual(result['content'], 'Test Content')\n                self.assertNotIn('cover_image_url', result)\n                \n    def test_flow_with_no_url_custom_title(self):\n        \"\"\"Test flujo sin URL pero con título personalizado\"\"\"\n        \n        with patch('posts.ai_generator.generate_tags_with_ai') as mock_tags:\n            mock_tags.return_value = ['custom', 'manual']\n            \n            result = generate_complete_post(\n                url=None,\n                rewrite_prompt=self.test_prompt,\n                title=\"Custom Article Title\",\n                extract_images=False,\n                generate_cover=False\n            )\n            \n            # Should succeed with custom title\n            self.assertTrue(result.get('success', True))\n            self.assertEqual(result['title'], 'Custom Article Title')\n            self.assertEqual(result['content'], 'Contenido generado automáticamente.')\n            self.assertEqual(result['tags'], ['custom', 'manual'])\n            \n    def test_flow_with_content_extraction_failure(self):\n        \"\"\"Test flujo con fallo en extracción de contenido\"\"\"\n        \n        with patch('posts.ai_generator.extract_content_from_url') as mock_extract:\n            mock_extract.return_value = {\n                'success': False,\n                'error': 'URL not accessible'\n            }\n            \n            result = generate_complete_post(\n                url=self.test_url,\n                rewrite_prompt=self.test_prompt\n            )\n            \n            # Should fail with extraction error\n            self.assertFalse(result['success'])\n            self.assertEqual(result['error'], 'URL not accessible')\n            \n    def test_flow_with_multiple_retry_attempts(self):\n        \"\"\"Test flujo con múltiples intentos de generación de imagen\"\"\"\n        \n        retry_attempts = []\n        \n        def mock_generate_image(prompt):\n            retry_attempts.append(len(retry_attempts) + 1)\n            if len(retry_attempts) < 3:\n                return (False, None, f\"Attempt {len(retry_attempts)} failed\")\n            else:\n                return (True, '/media/covers/success_on_third_try.jpg', None)\n                \n        with patch('posts.ai_generator.extract_content_from_url') as mock_extract, \\\n             patch('posts.ai_generator.rewrite_content_with_ai') as mock_rewrite, \\\n             patch('posts.ai_generator.generate_tags_with_ai') as mock_tags, \\\n             patch('posts.ai_generator.registry') as mock_registry:\n            \n            mock_extract.return_value = {\n                'success': True,\n                'content': 'Test content'\n            }\n            mock_rewrite.return_value = ('Test Title', 'Test Content')\n            mock_tags.return_value = ['test']\n            \n            # Setup service with retry logic\n            mock_service = Mock()\n            mock_service.generate_image.side_effect = mock_generate_image\n            mock_registry.get_default_service.return_value = mock_service\n            \n            with patch('posts.ai_generator.CoverImagePromptBuilder') as mock_builder:\n                mock_builder.build_cover_prompt.return_value = \"Test prompt\"\n                \n                result = generate_complete_post(\n                    url=self.test_url,\n                    rewrite_prompt=self.test_prompt,\n                    extract_images=False,\n                    generate_cover=True\n                )\n                \n                # Should succeed on third attempt\n                self.assertTrue(result.get('success', True))\n                self.assertEqual(result['cover_image_url'], '/media/covers/success_on_third_try.jpg')\n                self.assertEqual(len(retry_attempts), 3)\n                self.assertEqual(mock_service.generate_image.call_count, 3)\n                \n    def test_reading_time_calculation_accuracy(self):\n        \"\"\"Test precisión del cálculo de tiempo de lectura\"\"\"\n        \n        test_cases = [\n            (100, 1),   # 100 words = 1 minute (minimum)\n            (200, 1),   # 200 words = 1 minute\n            (400, 2),   # 400 words = 2 minutes\n            (600, 3),   # 600 words = 3 minutes\n            (1000, 5),  # 1000 words = 5 minutes\n        ]\n        \n        for word_count, expected_minutes in test_cases:\n            with self.subTest(word_count=word_count):\n                # Create content with specific word count\n                content = ' '.join(['word'] * word_count)\n                \n                with patch('posts.ai_generator.extract_content_from_url') as mock_extract, \\\n                     patch('posts.ai_generator.rewrite_content_with_ai') as mock_rewrite, \\\n                     patch('posts.ai_generator.generate_tags_with_ai') as mock_tags:\n                    \n                    mock_extract.return_value = {\n                        'success': True,\n                        'content': 'Original content'\n                    }\n                    mock_rewrite.return_value = ('Title', content)\n                    mock_tags.return_value = ['test']\n                    \n                    result = generate_complete_post(\n                        url=self.test_url,\n                        rewrite_prompt=self.test_prompt,\n                        extract_images=False,\n                        generate_cover=False\n                    )\n                    \n                    self.assertEqual(result['reading_time'], expected_minutes)\n                    \n    def test_image_processing_integration(self):\n        \"\"\"Test integración del procesamiento de imágenes en el contenido\"\"\"\n        \n        with patch('posts.ai_generator.extract_content_from_url') as mock_extract, \\\n             patch('posts.ai_generator.rewrite_content_with_ai') as mock_rewrite, \\\n             patch('posts.ai_generator.generate_tags_with_ai') as mock_tags, \\\n             patch('posts.ai_generator.extract_images_from_url') as mock_extract_images, \\\n             patch('posts.ai_generator.download_image') as mock_download, \\\n             patch('posts.ai_generator.process_images_in_content') as mock_process:\n            \n            mock_extract.return_value = {\n                'success': True,\n                'content': 'Original content'\n            }\n            mock_rewrite.return_value = ('Title', 'Generated content')\n            mock_tags.return_value = ['test']\n            mock_extract_images.return_value = [\n                {'src': 'https://example.com/img.jpg', 'alt': 'Test image'}\n            ]\n            mock_download.return_value = '/media/images/processed_img.jpg'\n            mock_process.return_value = 'Content with processed images'\n            \n            result = generate_complete_post(\n                url=self.test_url,\n                rewrite_prompt=self.test_prompt,\n                extract_images=True,\n                max_images=1,\n                generate_cover=False\n            )\n            \n            # Verify image processing was called with correct parameters\n            mock_process.assert_called_once_with(\n                'Generated content',\n                [{'src': 'https://example.com/img.jpg', 'alt': 'Test image', 'local_url': '/media/images/processed_img.jpg'}]\n            )\n            \n            # Verify final content includes processed images\n            self.assertEqual(result['content'], 'Content with processed images')\n            \n    def test_error_logging_and_recovery(self):\n        \"\"\"Test logging de errores y recuperación\"\"\"\n        \n        with patch('posts.ai_generator.extract_content_from_url') as mock_extract, \\\n             patch('posts.ai_generator.rewrite_content_with_ai') as mock_rewrite, \\\n             patch('posts.ai_generator.generate_tags_with_ai') as mock_tags, \\\n             patch('posts.ai_generator.logger') as mock_logger:\n            \n            mock_extract.return_value = {\n                'success': True,\n                'content': 'Test content'\n            }\n            mock_rewrite.return_value = ('Title', 'Content')\n            \n            # Mock tags generation failure\n            mock_tags.side_effect = Exception(\"Tags service unavailable\")\n            \n            result = generate_complete_post(\n                url=self.test_url,\n                rewrite_prompt=self.test_prompt,\n                extract_images=False,\n                generate_cover=False\n            )\n            \n            # Should still succeed with empty tags\n            self.assertTrue(result.get('success', True))\n            self.assertEqual(result['tags'], [])\n            \n            # Should log the warning\n            mock_logger.warning.assert_called_with(\"Error generating tags: Tags service unavailable\")\n\n\nclass TestEndToEndIntegration(TestCase):\n    \"\"\"Test de integración end-to-end simulando uso real\"\"\"\n    \n    def setUp(self):\n        self.user = User.objects.create_user(\n            username='testuser',\n            email='test@example.com',\n            password='testpass123'\n        )\n        \n    def test_realistic_blog_post_generation_scenario(self):\n        \"\"\"Test escenario realista de generación de post de blog\"\"\"\n        \n        # Simulate a real blog article URL\n        test_url = \"https://techblog.example.com/ai-trends-2024\"\n        \n        # Realistic content that might be extracted\n        realistic_content = \"\"\"\n        Artificial Intelligence continues to evolve rapidly in 2024. \n        Machine learning algorithms are becoming more sophisticated, \n        and deep learning models are achieving unprecedented accuracy \n        in various domains including natural language processing, \n        computer vision, and robotics. This article explores the \n        latest trends and developments in AI technology.\n        \"\"\"\n        \n        # Realistic AI-generated rewrite\n        realistic_rewrite = \"\"\"\n        The landscape of Artificial Intelligence is experiencing \n        remarkable transformation in 2024. Advanced machine learning \n        algorithms are pushing the boundaries of what's possible, \n        while deep learning models continue to break new ground in \n        accuracy and performance across multiple disciplines.\n        \n        From natural language processing breakthroughs to computer \n        vision innovations and robotics advancements, AI is reshaping \n        how we interact with technology. This comprehensive analysis \n        examines the most significant AI trends and developments \n        defining this pivotal year.\n        \"\"\"\n        \n        with patch('posts.ai_generator.extract_content_from_url') as mock_extract, \\\n             patch('posts.ai_generator.rewrite_content_with_ai') as mock_rewrite, \\\n             patch('posts.ai_generator.generate_tags_with_ai') as mock_tags, \\\n             patch('posts.ai_generator.extract_images_from_url') as mock_extract_images, \\\n             patch('posts.ai_generator.download_image') as mock_download, \\\n             patch('posts.ai_generator.process_images_in_content') as mock_process, \\\n             patch('posts.ai_generator.registry') as mock_registry:\n            \n            # Setup realistic mocks\n            mock_extract.return_value = {\n                'success': True,\n                'content': realistic_content\n            }\n            \n            mock_rewrite.return_value = (\n                'AI Trends 2024: Revolutionary Developments in Machine Learning',\n                realistic_rewrite\n            )\n            \n            mock_tags.return_value = [\n                'artificial-intelligence', 'machine-learning', 'deep-learning',\n                'technology-trends', 'ai-2024', 'computer-vision', 'nlp'\n            ]\n            \n            mock_extract_images.return_value = [\n                {\n                    'src': 'https://techblog.example.com/images/ai-brain.jpg',\n                    'alt': 'AI Neural Network Visualization'\n                },\n                {\n                    'src': 'https://techblog.example.com/images/ml-chart.png',\n                    'alt': 'Machine Learning Performance Chart'\n                }\n            ]\n            \n            mock_download.side_effect = [\n                '/media/images/ai_brain_processed.jpg',\n                '/media/images/ml_chart_processed.png'\n            ]\n            \n            mock_process.return_value = realistic_rewrite + \"\\n\\n[Images processed and embedded]\"\n            \n            # Mock successful cover image generation\n            mock_service = Mock()\n            mock_service.generate_image.return_value = (\n                True,\n                '/media/covers/ai_trends_2024_cover.jpg',\n                None\n            )\n            mock_registry.get_default_service.return_value = mock_service\n            \n            with patch('posts.ai_generator.CoverImagePromptBuilder') as mock_builder:\n                mock_builder.build_cover_prompt.return_value = \\\n                    \"Professional cover image for AI trends 2024 article, modern tech style\"\n                \n                # Execute realistic generation\n                result = generate_complete_post(\n                    url=test_url,\n                    rewrite_prompt=\"Reescribe este artículo de manera profesional y atractiva para un blog de tecnología\",\n                    extract_images=True,\n                    max_images=2,\n                    generate_cover=True,\n                    image_style='tech'\n                )\n                \n                # Verify realistic results\n                self.assertTrue(result.get('success', True))\n                self.assertEqual(\n                    result['title'], \n                    'AI Trends 2024: Revolutionary Developments in Machine Learning'\n                )\n                self.assertIn('Revolutionary Developments', result['content'])\n                self.assertIn('[Images processed and embedded]', result['content'])\n                self.assertEqual(len(result['tags']), 7)\n                self.assertIn('artificial-intelligence', result['tags'])\n                self.assertEqual(result['cover_image_url'], '/media/covers/ai_trends_2024_cover.jpg')\n                self.assertEqual(len(result['images']), 2)\n                \n                # Verify reading time is reasonable (should be around 1-2 minutes)\n                self.assertGreaterEqual(result['reading_time'], 1)\n                self.assertLessEqual(result['reading_time'], 3)\n"