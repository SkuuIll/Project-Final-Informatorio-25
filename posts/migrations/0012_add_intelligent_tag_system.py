# Generated by Django 5.2.4 on 2025-07-26 06:17

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('posts', '0011_update_ai_models'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TagCooccurrence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.PositiveIntegerField(default=1, help_text='Número de veces que estos tags han aparecido juntos', verbose_name='Contador')),
                ('strength', models.FloatField(default=0.0, help_text='Fuerza de la relación entre los tags (0-1)', verbose_name='Fuerza de relación')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Última actualización')),
                ('tag1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cooccurrences_as_tag1', to='taggit.tag', verbose_name='Tag 1')),
                ('tag2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cooccurrences_as_tag2', to='taggit.tag', verbose_name='Tag 2')),
            ],
            options={
                'verbose_name': 'Coocurrencia de Tags',
                'verbose_name_plural': 'Coocurrencias de Tags',
                'indexes': [models.Index(fields=['tag1', '-strength'], name='tagcooccur_tag1_strength'), models.Index(fields=['tag2', '-strength'], name='tagcooccur_tag2_strength'), models.Index(fields=['-strength'], name='tagcooccur_strength_desc'), models.Index(fields=['-count'], name='tagcooccur_count_desc'), models.Index(fields=['-last_updated'], name='tagcooccur_updated')],
                'unique_together': {('tag1', 'tag2')},
            },
        ),
        migrations.CreateModel(
            name='TagMetadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('usage_count', models.PositiveIntegerField(default=0, help_text='Número total de veces que se ha usado este tag', verbose_name='Contador de uso')),
                ('trending_score', models.FloatField(default=0.0, help_text='Score calculado para determinar si el tag está en tendencia', verbose_name='Puntuación trending')),
                ('last_used', models.DateTimeField(auto_now=True, help_text='Fecha y hora del último uso del tag', verbose_name='Último uso')),
                ('is_approved', models.BooleanField(default=True, help_text='Indica si el tag ha sido aprobado por moderadores', verbose_name='Aprobado')),
                ('is_trending', models.BooleanField(default=False, help_text='Indica si el tag está actualmente en tendencia', verbose_name='En tendencia')),
                ('category', models.CharField(blank=True, help_text='Categoría temática del tag (ej: tecnología, programación)', max_length=50, verbose_name='Categoría')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última actualización')),
                ('created_by', models.ForeignKey(blank=True, help_text='Usuario que creó este tag', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Creado por')),
                ('tag', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='metadata', to='taggit.tag', verbose_name='Tag')),
            ],
            options={
                'verbose_name': 'Metadatos de Tag',
                'verbose_name_plural': 'Metadatos de Tags',
                'indexes': [models.Index(fields=['-usage_count'], name='tagmeta_usage_desc'), models.Index(fields=['-trending_score'], name='tagmeta_trending_desc'), models.Index(fields=['is_trending'], name='tagmeta_trending'), models.Index(fields=['is_approved'], name='tagmeta_approved'), models.Index(fields=['-last_used'], name='tagmeta_last_used'), models.Index(fields=['-created_at'], name='tagmeta_created'), models.Index(fields=['is_approved', '-usage_count'], name='tagmeta_approved_popular'), models.Index(fields=['is_trending', '-trending_score'], name='tagmeta_trending_score'), models.Index(fields=['category', '-usage_count'], name='tagmeta_category_popular')],
            },
        ),
        migrations.CreateModel(
            name='TagSynonym',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('synonym_text', models.CharField(help_text='Texto alternativo que será redirigido al tag principal', max_length=100, unique=True, verbose_name='Texto del sinónimo')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('is_active', models.BooleanField(default=True, help_text='Indica si el sinónimo está activo', verbose_name='Activo')),
                ('created_by', models.ForeignKey(help_text='Usuario que definió este sinónimo', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Creado por')),
                ('main_tag', models.ForeignKey(help_text='Tag principal al que se redirigirán los sinónimos', on_delete=django.db.models.deletion.CASCADE, related_name='synonyms', to='taggit.tag', verbose_name='Tag principal')),
            ],
            options={
                'verbose_name': 'Sinónimo de Tag',
                'verbose_name_plural': 'Sinónimos de Tags',
                'indexes': [models.Index(fields=['synonym_text'], name='tagsynonym_text'), models.Index(fields=['main_tag', 'is_active'], name='tagsynonym_main_active'), models.Index(fields=['-created_at'], name='tagsynonym_created')],
            },
        ),
        migrations.CreateModel(
            name='TagUsageHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('used_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de uso')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tag_usage_history', to='posts.post', verbose_name='Post')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_history', to='taggit.tag', verbose_name='Tag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Historial de Uso de Tag',
                'verbose_name_plural': 'Historiales de Uso de Tags',
                'indexes': [models.Index(fields=['tag', '-used_at'], name='taghistory_tag_time'), models.Index(fields=['-used_at'], name='taghistory_time_desc'), models.Index(fields=['used_at'], name='taghistory_time_asc'), models.Index(fields=['user', '-used_at'], name='taghistory_user_time'), models.Index(fields=['post'], name='taghistory_post')],
            },
        ),
    ]
