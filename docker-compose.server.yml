version: "3.8"

services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres -c max_connections=200
               -c shared_buffers=256MB
               -c effective_cache_size=1GB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.9
               -c wal_buffers=16MB
               -c default_statistics_target=100

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  web:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:8000"
    volumes:
      - .:/app
      - media_files:/app/media
      - static_files:/app/staticfiles
      - logs:/app/logs
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: >
      sh -c "
        echo 'Esperando base de datos...' &&
        python manage.py migrate --noinput &&
        echo 'Migraciones completadas' &&
        python manage.py collectstatic --noinput &&
        echo 'Archivos est√°ticos recolectados' &&
        python manage.py initialize_tag_system --calculate-cooccurrence --create-history &&
        echo 'Sistema de tags inicializado' &&
        echo 'Iniciando servidor...' &&
        gunicorn blog.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 120 --max-requests 1000 --preload
      "

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
      - media_files:/app/media
      - logs:/app/logs
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "blog", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: celery -A blog worker -l info --concurrency=2

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
      - logs:/app/logs
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: celery -A blog beat -l info

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_files:
    driver: local
  static_files:
    driver: local
  logs:
    driver: local

networks:
  default:
    driver: bridge
