// Favorites System - Handles post favorites
(function() {
    'use strict';

    // Utility functions
    function getCookie(name) {
        let cookieValue = null;
        if (document.cookie && document.cookie !== '') {
            const cookies = document.cookie.split(';');
            for (let i = 0; i < cookies.length; i++) {
                const cookie = cookies[i].trim();
                if (cookie.substring(0, name.length + 1) === (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }

    function showToast(message, type = 'info') {
        // Simple toast notification
        const toast = document.createElement('div');
        toast.className = `fixed top-4 right-4 z-50 px-4 py-2 rounded-lg text-white font-medium transition-all duration-300 transform translate-x-full opacity-0 ${
            type === 'error' ? 'bg-red-500' : 
            type === 'success' ? 'bg-green-500' : 
            type === 'warning' ? 'bg-yellow-500' : 'bg-blue-500'
        }`;
        toast.textContent = message;
        document.body.appendChild(toast);

        // Animate in
        setTimeout(() => {
            toast.classList.remove('translate-x-full', 'opacity-0');
        }, 100);

        // Remove after 3 seconds
        setTimeout(() => {
            toast.classList.add('translate-x-full', 'opacity-0');
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }

    const csrftoken = getCookie('csrftoken');

    // Initialize when DOM is ready
    function initializeFavoriteSystem() {
        console.log('Initializing favorite system...');
        
        // Remove any existing listeners to prevent duplicates
        if (document.body.hasAttribute('data-favorite-initialized')) {
            console.log('Favorite system already initialized');
            return;
        }

        // Check if favorite button exists
        const favoriteButton = document.getElementById('favorite-button');
        console.log('Favorite button found:', favoriteButton);
        
        if (favoriteButton) {
            const icon = favoriteButton.querySelector('i');
            console.log('Icon in button:', icon);
        }

        // Handle favorite clicks
        document.body.addEventListener('click', handleFavoriteClick);
        document.body.setAttribute('data-favorite-initialized', 'true');
        console.log('Favorite system initialized successfully');
    }

    function handleFavoriteClick(e) {
        // Handle favorite button clicks
        const favoriteButton = e.target.closest('#favorite-button[data-url]');
        if (favoriteButton) {
            console.log('Favorite button clicked:', favoriteButton);
            e.preventDefault();
            e.stopPropagation();
            handleFavorite(favoriteButton);
            return;
        }
    }

    function handleFavorite(button) {
        console.log('handleFavorite called with button:', button);
        
        if (button.hasAttribute('data-processing')) {
            console.log('Button is already processing, skipping');
            return;
        }

        const url = button.getAttribute('data-url');
        console.log('Button URL:', url);
        if (!url) {
            console.error('Favorite button is missing data-url attribute.');
            showToast('Error: URL del favorito no encontrada', 'error');
            return;
        }

        // Look for both the original <i> element and the SVG generated by Feather Icons
        const icon = button.querySelector('i[data-feather="bookmark"]') || 
                    button.querySelector('svg[data-feather="bookmark"]') || 
                    button.querySelector('i') || 
                    button.querySelector('svg');
        
        console.log('Found icon:', icon);
        if (!icon) {
            console.error('Could not find bookmark icon inside the favorite button.');
            console.log('Button HTML:', button.innerHTML);
            showToast('Error: Icono del botón no encontrado', 'error');
            return;
        }

        performFavoriteAction(button, url, icon);
    }

    function performFavoriteAction(button, url, icon) {
        // Set processing state
        button.setAttribute('data-processing', 'true');
        button.style.pointerEvents = 'none';
        button.style.opacity = '0.6';

        // Add loading animation
        button.style.transform = 'scale(0.95)';

        fetch(url, {
            method: 'POST',
            headers: {
                'X-CSRFToken': csrftoken,
                'X-Requested-With': 'XMLHttpRequest',
                'Content-Type': 'application/json',
            },
            credentials: 'same-origin'
        })
        .then(response => {
            if (response.status === 401 || response.status === 403) {
                showToast('Debes iniciar sesión para agregar favoritos', 'warning');
                setTimeout(() => {
                    window.location.href = '/accounts/login/?next=' + encodeURIComponent(window.location.pathname);
                }, 1500);
                return Promise.reject('User not authenticated');
            }
            if (!response.ok) {
                return response.json().then(err => Promise.reject(err.error || 'Server error'));
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // Update icon state (works for both <i> and <svg> elements)
                if (data.favorited) {
                    icon.classList.add('text-amber-500');
                    // For SVG elements, we need to set fill style directly
                    if (icon.tagName === 'svg') {
                        icon.style.fill = 'currentColor';
                    } else {
                        icon.classList.add('fill-current');
                    }
                    button.classList.add('favorited');
                    button.setAttribute('aria-label', 'Remover de favoritos');
                } else {
                    icon.classList.remove('text-amber-500');
                    if (icon.tagName === 'svg') {
                        icon.style.fill = 'none';
                    } else {
                        icon.classList.remove('fill-current');
                    }
                    button.classList.remove('favorited');
                    button.setAttribute('aria-label', 'Añadir a favoritos');
                }

                // Success animation
                button.style.transform = 'scale(1.1)';
                setTimeout(() => {
                    button.style.transform = 'scale(1)';
                }, 200);

                // Show success message
                const message = data.message || (data.favorited ? 
                    'Post agregado a favoritos' : 
                    'Post removido de favoritos');
                showToast(message, 'success');

                // Re-initialize Feather icons
                if (typeof feather !== 'undefined') {
                    feather.replace();
                }

            } else {
                throw new Error(data.error || 'Error desconocido');
            }
        })
        .catch(error => {
            console.error('Favorite action failed:', error);
            showToast(error.toString() || 'Error al procesar el favorito', 'error');
        })
        .finally(() => {
            // Reset button state
            button.removeAttribute('data-processing');
            button.style.pointerEvents = 'auto';
            button.style.opacity = '1';
            button.style.transform = 'scale(1)';
        });
    }

    // Initialize when DOM is loaded
    function initializeWhenReady() {
        // Wait for Feather icons to be available and processed
        if (typeof feather !== 'undefined') {
            feather.replace();
            // Wait a bit more for Feather to finish processing
            setTimeout(() => {
                initializeFavoriteSystem();
            }, 200);
        } else {
            // If Feather is not available, initialize anyway
            setTimeout(initializeWhenReady, 100);
        }
    }

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeWhenReady);
    } else {
        initializeWhenReady();
    }

    // Fallback initialization after a longer delay
    setTimeout(() => {
        if (!document.body.hasAttribute('data-favorite-initialized')) {
            console.log('Fallback initialization of favorite system');
            initializeFavoriteSystem();
        }
    }, 1000);

    // Re-initialize on page changes (for SPA-like behavior)
    window.addEventListener('load', function() {
        initializeWhenReady();
    });

})();